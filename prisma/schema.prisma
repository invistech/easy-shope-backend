generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "./generated-models"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../dbml"
  outputName = "easyshop.dbml"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../EASY_SHOP_ERD.svg"
}

model User {
  id         String      @id @default(uuid())
  cridential Cridential?
  role       UserRole[]
  profile    Profile?
}

model Cridential {
  userName     String @unique
  password     String
  passwordHash String
  email        String @unique
  mobileNumber String
  user         User   @relation(fields: [userId], references: [id])
  userId       String @unique

  @@id([userId])
}

model UserRole {
  name       String          @unique
  permission UserPermission?
  User       User?           @relation(fields: [userId], references: [id])
  userId     String          @unique

  @@id([userId])
}

model UserPermission {
  resources ResourceOfUser[]
  role      UserRole         @relation(fields: [userId], references: [name])
  userId    String           @unique

  @@id([userId])
}

model ResourceOfUser {
  resource   Resource       @relation(fields: [resourceId], references: [id])
  resourceId String
  permission UserPermission @relation(fields: [userId], references: [userId])
  userId     String

  @@id([userId, resourceId])
}

model Resource {
  id          String           @id @default(uuid())
  path        Json
  metadata    Json
  permissions ResourceOfUser[]
}

model Profile {
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  userName     String        @unique
  email        String        @unique
  mobileNumber String
  firstName    String
  lastName     String
  address      AddressOfUser?

  @@id([userId])
}

model AddressOfUser {
  htmlAttributions Json
  result           ResultOfAddress?  
  status           Json
  profile Profile @relation(fields: [userId], references: [userId])
  userId  String  @unique
  

  @@id([userId])
}

model ResultOfAddress {
  addressComponents        AddressComponentOfAddressResult[]
  adrAddress               Json
  businessStatus           Json
  formattedAddress         Json
  formattedPhoneNumber     String
  geometry                 GeometryOfAddressResult?
  icon                     String
  iconBackgroundColor      String
  iconMaskBaseUri          String
  internationalPhoneNumber String
  name                     String
  openingHours             OpeningHoursOfAddressResult?
  photos                   PhotoOfAddressResult[]
  placeId                  String
  plusCode                 PlusCodeOfAddressResult?
  rating                   Float
  reference                String
  reviews                  ReviewOfAddressResult[]
  types                    Json
  url                      String
  userRatingsTotal         Float
  utcOffset                Float
  vicinity                 String
  website                  String

  addressOfUser AddressOfUser @relation(fields: [userId], references: [userId])
  userId String @unique
  @@id([userId])
}

model AddressComponentOfAddressResult {
  longName String
  shortName String
  types Json
  addressResult ResultOfAddress @relation(fields: [userId], references: [userId])
  userId String @unique
  @@id([userId])
}

model GeometryOfAddressResult {
  location LoctionOfGeometry?
  viewport ViewportOfGeometry?
  addressResult ResultOfAddress @relation(fields: [userId], references: [userId])
  userId String @unique
  
  @@id([userId])
}
model LoctionOfGeometry {
  lat Float
  lng Float
  geometry GeometryOfAddressResult @relation(fields: [userId], references: [userId])
  userId String @unique
  
  @@id([userId])
  
}
model NorthestLoctionOfViewport {
  lat Float
  lng Float
  viewport ViewportOfGeometry @relation(fields: [userId], references: [userId])
  userId String @unique
  
  @@id([userId])
  
}
model SouthwestLoctionOfViewport {
  lat Float
  lng Float
  viewport ViewportOfGeometry @relation(fields: [userId], references: [userId])
  userId String @unique
  
  @@id([userId])
  
}
model ViewportOfGeometry {
  northest NorthestLoctionOfViewport?
  southwest SouthwestLoctionOfViewport?
  geometry GeometryOfAddressResult @relation(fields: [userId], references: [userId])
  userId String @unique
  
  @@id([userId])
}
model OpeningHoursOfAddressResult {
  openNow Boolean
  weekdayText Json
  periods PeriodOfAddressResult[]
  addressResult ResultOfAddress @relation(fields: [userId], references: [userId])
  userId String @unique
  @@id([userId])
}

model PeriodOfAddressResult {
  close CloseOfPeriod?
  open OpenOfPeriod?
  openingHour OpeningHoursOfAddressResult @relation(fields: [userId], references: [userId])
  userId String @unique
  @@id([userId])
}
model CloseOfPeriod {
  day Float
  time String
  period PeriodOfAddressResult @relation(fields: [userId], references: [userId])
  userId String @unique
  @@id([userId])
}
model OpenOfPeriod {
  day Float
  time String
  period PeriodOfAddressResult @relation(fields: [userId], references: [userId])
  userId String @unique
  @@id([userId])
}

model PhotoOfAddressResult {
  height Float
htmlAttributions Json
photoReference Json
width Float
addressResult ResultOfAddress @relation(fields: [userId], references: [userId])
  userId String @unique
  
  @@id([userId])
}

model PlusCodeOfAddressResult {
  addressResult ResultOfAddress @relation(fields: [userId], references: [userId])
  userId String @unique
  
  @@id([userId])
}
model ReviewOfAddressResult {
  addressResult ResultOfAddress @relation(fields: [userId], references: [userId])
  userId String @unique
  
  @@id([userId])
}

model AdminUser {
  id           String   @id @default(uuid())
  username     String   @unique
  password     String
  passwordHash String
  email        String   @unique
  mobileNumber String
  firstName    String
  lastName     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Store {
  id          String           @id @default(uuid())
  title       String
  description String
  outlets     OutletsOfStore[]
}

model Outlet {
  id         String                 @id @default(uuid())
  address    AddressesOfOutlets?
  store      OutletsOfStore?
  collection CollectionsOfOutlets[]
}

model OutletsOfStore {
  store    Store  @relation(fields: [storeId], references: [id])
  storeId  String
  outlets  Outlet @relation(fields: [outletId], references: [id])
  outletId String @unique

  @@id([outletId, storeId])
}

model AddressesOfOutlets {
  address   Address @relation(fields: [addressId], references: [id])
  addressId String
  outlet    Outlet  @relation(fields: [outletId], references: [id])
  outletId  String  @unique

  @@id([outletId, addressId])
}

model Address {
  id      String               @id @default(uuid())
  outlets AddressesOfOutlets[]
}

model CollectionsOfOutlets {
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  outlet       Outlet     @relation(fields: [outletId], references: [id])
  outletId     String

  @@id([outletId, collectionId])
}

model Collection {
  id          String                 @id @default(uuid())
  title       String                 @default("Empty product title")
  description String                 @default("Empty product description")
  images      String[]               @default(["No image added yet"])
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  products    Product[]
  outlets     CollectionsOfOutlets[]
  adminId     Float

  @@index([adminId])
}

model Product {
  id           String               @id @default(uuid())
  title        String               @default("Empty product title")
  description  String               @default("Empty product description")
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  varients     VarientsOfProducts[]
  itemIds      Float[]
  adminId      Float
  collection   Collection           @relation(fields: [collectionId], references: [id])
  collectionId String

  @@index([adminId])
}

model Varient {
  id           String               @id @default(uuid())
  name         String
  itemTypeId   Float
  itemTypeName String
  unit         UnitOfVarient?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  products     VarientsOfProducts[]
  productId    String
  items        Item[]
  adminId      Float

  @@index([adminId])
}

model Item {
  id              String       @id @default(uuid())
  title           String       @default("Empty item title")
  description     String       @default("Empty item description")
  type            TypeOfItems?
  typeId          String
  buyingPrice     Float
  additionalCost  Float
  totalCost       Float
  retailPrice     Float
  discountedPrice Float
  wholesalePrice  Float
  invoicePrice    Float
  featuredImage   String
  productImage    String
  weight          Float

  unit UnitOfItems?

  volume    Float
  quantity  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adminId   Float
  varient   Varient  @relation(fields: [varientId], references: [id])
  varientId String

  @@index([adminId])
}

model Unit {
  id        String          @id @default(uuid())
  items     UnitOfItems[]
  unitName  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  adminId   Float
  varients  UnitOfVarient[]

  @@index([adminId])
}

model Type {
  id        String        @id @default(uuid())
  name      String
  items     TypeOfItems[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  adminId   Float

  @@index([adminId])
}

model Image {
  id        String   @id @default(uuid())
  path      String   @unique
  size      String   @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id           String   @id @default(uuid())
  username     String   @unique
  password     String
  passwordHash String
  firstName    String
  lastName     String
  email        String   @unique
  mobileNumber String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Pivote table for product-varient
model VarientsOfProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  varient   Varient @relation(fields: [varientId], references: [id])
  varientId String

  @@id([productId, varientId])
}

model UnitOfVarient {
  varient   Varient @relation(fields: [varientId], references: [id])
  varientId String  @unique
  unit      Unit    @relation(fields: [unitId], references: [id])
  unitId    String

  @@id([varientId, unitId])
}

model UnitOfItems {
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String @unique
  unit   Unit   @relation(fields: [unitId], references: [id])
  unitId String

  @@id([itemId, unitId])
}

model TypeOfItems {
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String @unique
  type   Type   @relation(fields: [typeId], references: [id])
  typeId String

  @@id([itemId, typeId])
}
